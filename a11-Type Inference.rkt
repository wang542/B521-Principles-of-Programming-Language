#lang racket
(require "mk.rkt")

(defrel (apply-Go G e t)
    (fresh (a G^)
      (== `(,a . ,G^) G)
      (fresh (aa da)
        (== `(,aa . ,da) a)
        (conde
          ((== aa e) (== da t))
          ((=/= aa e) (apply-Go G^ e t))))))

(defrel (!- G e t)
  (conde
      ((numbero e) (== 'Nat t))
      ((== t 'Bool)
       (conde
         ((== #t e))
         ((== #f e))))
      ;*
      ((fresh (a b)
              (== `(* ,a ,b) e)
              (== 'Nat t)
              (!- G a 'Nat)
              (!- G b 'Nat)))
      ;not
      ((fresh (a)
              (== `(not ,a) e)
              (== 'Bool t)
              (!- G a 'Bool)))
      ;zero?
      ((fresh (a)
              (== `(zero? ,a) e)
              (== 'Bool t)
              (!- G a 'Nat)))
      ;sub1
      ((fresh (a)
              (== `(sub1 ,a) e)
              (== 'Nat t)
              (!- G a 'Nat)))
      ;fix
      ((fresh (x body)
              (== `(fix (lambda (,x) ,body)) e)
              (symbolo x)
              (fresh (t1)
                     (== t1 t)
                     (!- `((,x . ,t1) . ,G) body t1))))
      ;pairof
      ((fresh (x1 x2 t1 t2)
              (== `(cons ,x1 ,x2) e)
              (== `(pairof ,t1 ,t2) t)
              (!- G x1 t1)
              (!- G x2 t2)))
      ((fresh (a cart cdrt)
              (== `(car ,a) e)
              (== cart t)
              (!- G a `(pairof ,cart ,cdrt))))
      ((fresh (a cart cdrt)
              (== `(cdr ,a) e)
              (== cdrt t)
              (!- G a `(pairof ,cart ,cdrt))))
      ;let-Incomplete
      ((fresh (var val body t1)
              (== `(let ([,var ,val]) ,body) e)
              (!- G val t1)
              (!- `((,var . ,t1) . ,G) body t1)))
      ((fresh (ne1 ne2)
         (== `(+ ,ne1 ,ne2) e)
         (== 'Nat t)
         (!- G ne1 'Nat)
         (!- G ne2 'Nat)))
      ((fresh (teste anse elsee)
        (== `(if ,teste ,anse ,elsee) e)
        (!- G teste 'Bool)
        (!- G anse t)
        (!- G elsee t)))
      ((symbolo e) (apply-Go G e t))
      ((fresh (x b)
        (== `(lambda (,x) ,b) e)
        (symbolo x)
        (fresh (tx tb)          
          (== `(,tx -> ,tb) t)
          (!- `((,x . ,tx) . ,G) b tb))))
      ((fresh (e1 arg)
        (== `(,e1 ,arg) e)
        (fresh (targ)
          (!- G e1 `(,targ -> ,t))
          (!- G arg targ))))))
